#!/bin/bash

# Common
source "${0%/*}/config/common"
source "${0%/*}/config/machine"

file=$1
trigger=$2

# If we can actually find the file..
if [ ! -e "$file" ] 
then
  echo $(date)": $file not found!" >&2 
  exit 1
fi


base=$(basename "$file")
ext="${base##*.}"

# -- Special Debug Mode
if [ $ext == "debug" ] 
then
  ext="mp4"
  trigger="debug"
  echo $(date)": $file being processed in debug mode" >&2
  set -x
fi

# .. and the file is an original recording
if [ ! $ext == "mp4" ] 
then
  echo $(date)": $file is not a recording" >&2
 exit 1
fi

# ... and we have somewhere to upload it..
if [ -z "$urlUpload" ]
then
  echo $(date)": $file is not being uploaded" >&2
  exit 1
fi

# .. and the file isn't currently open (incrontab can be weird)
statA=$(ls -l "$file")
sleep 2
statB=$(ls -l "$file")
if [ ! "$statA" == "$statB" ]
then
   echo $(date)": $file is still open.  Ignoring for now." >&2
   exit 1
fi


# Log everything from here down to the file's trace
exec > "$file.log" 2>&1

         # If the filename is an epoch, use it as the start time
         basename=$(basename "$file")
         IFS='.' read -a names <<< "$basename"
         epoch=${names[0]}

         # Look it up in the local meta data
         echo "Metadata date is : [$epoch]" 
         info=$($pathRoot/parse meta-epoch "$epoch")
         echo "Parse returned   : [$info]" 

         # Couldn't find anything?  That's OK.. use the default stuff
         if [ "$info" == "" ]
         then
             echo "Couldn't find metadata : $roomID / $epoch" 
             info="$roomID Recording|Recording|capture-$roomID"
         fi

         echo "Metadata : $info" 

         IFS='|' read -a meta <<< "$info"
         metaTitle=${meta[0]}
         metaDescription=${meta[1]}
         metaUser=${meta[2]}
                  

        if [ "$trigger" == "debug" ]
        then
           exit 1
        fi

        # Convert as needed
         source="$file"
         dest="$file.converted"

         echo "Pre Conversion : $file " 
         /usr/bin/HandBrakeCLI -i "$source" -o "$dest" --encoder x264 --optimize --start-at frame:5 

         if [ -e "$dest" ] 
         then
           file="$dest"
         fi
         echo "Post Conversion : $file " 


         # Calculate the date this thing should expire
         expires=$(date +"%Y-%m-%d %H-%M-%S" -d "+4 months")

         # Post to the media server
         set -x
         uploadResult=$(/usr/bin/curl -F "batchMode=Y" -F "public=0" -F "title=$metaTitle" -F "description=$metaDescription" -F "uploadedUser=$metaUser" -F "expires=$expires" -F "keywords=$roomID $basename lecture" -F "file=@$file" "$urlUpload")
         set +x

         # Archive the original file
         echo $uploadResult 

         if [[ "$uploadResult" == *Success* ]]
         then
              mv "$file" "$file.uploaded"
              $pathRoot/notify "$roomID : Upload Success" "$file\n$info"
         else
              $pathRoot/notify "$roomID : Upload Failure" "$file\n$info"
         fi

         # Remove uploaded stuff older than 1 week
	 find "$pathRoot/video/*.uploaded" -mtime +14 -exec rm {} \;

	 # Alert if space is low
 	 spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
	 [[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"


echo $(date)" : Processing Complete"

