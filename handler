#!/bin/bash

# Common
source "${0%/*}/config/common"
source "${0%/*}/config/machine"

function logHandler { 
   echo $(date)" : $$ : $@" >> "$pathLog/handler.log"
}

file=$1
trigger=$2


# If we can actually find the file..
if [ ! -e "$file" ] 
then
  logHandler "$file not found! Exiting." 
  exit 1
fi


base=$(basename "$file")
ext="${base##*.}"

# -- Special Debug Mode
if [ $ext == "debug" ] 
then
  ext="mp4"
  trigger="debug"
  logHandler "$file being processed in debug mode.  Continuing." 
  set -x
fi

# .. If the file is an original recording
if [ ! $ext == "mp4" ] 
then
  # logHandler "$file is not a recording.  Exiting." 
  exit 1
fi

# .. and the file isn't currently open (incrontab can be weird)
statA=$(ls -l "$file")
sleep 2
statB=$(ls -l "$file")
if [ ! "$statA" == "$statB" ]
then
   logHandler "$file is still open.  Ignoring for now.  Exiting."
   exit 1
fi

logHandler "$file, TRIGGER=$2"


# Log everything from here down to the file's trace
fileLOG="${file%.*}.log"
logHandler "$fileLOG created"

exec > "$fileLOG" 2>&1

         # If the filename is an epoch, use it as the start time
         basename=$(basename "$file")
         IFS='.' read -a names <<< "$basename"
         epoch=${names[0]}

         # Look it up in the local meta data
         echo "Metadata date is : [$epoch]" 
         info=$($pathRoot/parse meta-epoch "$epoch")
         echo "Parse returned   : [$info]" 

         # Couldn't find anything?  That's OK.. use the default stuff
         if [ "$info" == "" ]
         then
             echo "Couldn't find metadata : $roomID / $epoch" 
             info="$roomID Recording|Recording|capture-$roomID"
         fi

         echo "Metadata : $info" 

         IFS='|' read -a meta <<< "$info"
         metaTitle=${meta[0]}
         metaDescription=${meta[1]}
         metaUser=${meta[2]}

         if [ "$trigger" == "debug" ]
         then
            logHandler "$file debug requested.  Exiting."
            exit 1
         fi


         # Calculate the date this thing should expire
         expires=$(date +"%Y-%m-%d %H-%M-%S" -d "+4 months")


         # Convert if we need to
         if [ ! -z "$videoConvert" ] 
         then

        			 source="$file"
					 dest="${file%.*}.m4v"
                     export source dest

					 echo "Pre Conversion : $file " 
					 echo "Convert        : $videoConvert "

                     /usr/bin/HandBrakeCLI -i "$source" -o "$dest" --encoder x264 --optimize --start-at frame:5 
                     #envsubst < "$videoConvert" | eval 
                     
					 if [ -e "$dest" ] 
					 then
					   file="$dest"
                     fi
                     echo "Post Conversion : $file " 

         fi


         # Create a local metadata file
         fileJSON="${file%.*}.json"
         cat <<EOL > "$fileJSON"
         {  
            "file" : "$basename",
            "title" : "$metaTitle",
            "description" : "$metaDescription",
            "public" : 0,
            "uploadedUser" : "$metaUser",
            "expires" : "$expires",
            "keywords" : "$roomID $basename lecture"
         }
EOL

         logHandler "$fileJSON created"


         # Upload if we need to
         if [ ! -z "$urlUpload" ]
         then
					 set -x
					 uploadResult=$(/usr/bin/curl -F "batchMode=Y" -F "public=0" -F "title=$metaTitle" -F "description=$metaDescription" -F "uploadedUser=$metaUser" -F "expires=$expires" -F "keywords=$roomID $basename lecture" -F "file=@$file" "$urlUpload")
					 set +x

					 # Archive the original file
					 echo $uploadResult 

					 if [[ "$uploadResult" == *Success* ]]
					 then
						  mv "$file" "$file.uploaded"
						  #$pathRoot/notify "$roomID : Upload Success" "$file\n$info"

					 else
						  $pathRoot/notify "$roomID : Upload Failure" "$file\n$info"
					 fi

                     logHandler "$file upload : $uploadResult"

					 # Remove uploaded stuff older than 3 weeks
					 find "$pathRoot/video/*.uploaded" -mtime +21 -exec rm {} \;

         fi


	 # Alert if space is low
 	 spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
	 [[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"

echo $(date)" : $file : Processing Complete"
logHandler "$file complete"


