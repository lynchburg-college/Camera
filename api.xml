<?vlc

--
-- API / handler for all web actions
--

require "httprequests"

--
-- Utility Functions
--
function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end
-- ----------------------
function string.ends(String,End)
   return End=='' or string.sub(String,-string.len(End))==End
end
-- ----------------------
function pairsByKeys (t, f)
      local a = {}
      for n in pairs(t) do table.insert(a, n) end
      table.sort(a, f)
      local i = 0      -- iterator variable
      local iter = function ()   -- iterator function
        i = i + 1
        if a[i] == nil then return nil
        else return a[i], t[a[i]]
        end
      end
      return iter
 end
-- ----------------------
function getProperties ( collection )
   local o={}
   for k,v in pairsByKeys(collection) do
    if(type(v.children) == "table" ) then
     o[v.name]=getProperties( v.children )
    else
     o[v.name]=v.value
    end
   end
   return o
end
-- ----------------------
function api_execute(cmd, raw)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  return s
end
-- ----------------------
function api_vlm ( cmd )
     local cc=string.gsub( cmd, "+"," ")
     return vlc.vlm():execute_command( cc )
end
-- ----------------------
function api_now()
   return os.date("%a %b %d, %Y @ %I:%M:%S%p  ")
end
-- ----------------------
function api_writefile( configFile, configContents )

   local result=""

   if( configFile == nil ) then
      result="No filename specified."

   elseif ( configContents == nil ) then
      result="No contents provided."

   else

       local now = api_now()
       local ff="config/"..configFile
       local cc=string.gsub( configContents, "+"," ")

       api_execute ( "mv "..ff.." "..ff..".bak" )

       local file = io.open( ff, "w")

	   file:write('# Written : '..now..'\n')
	   file:write('\n')

	   file:write(cc )
	   file:flush()
	   file:close()

	   result = ff.." configuration saved"
	 
   end

   return result

end



-- Get the input object
local command=_GET["command"]
local action=_GET["action"]
local item=_GET["item"]


-- Create the output object
local json = {}

json["timestamp"]=os.date("%Y-%m-%d %H:%M:%S (%a)")
json["command"]=command
json["action"]=action
json["item"]=item
json["result"] = ""


-- --------------------------------------------------------------------------
if ( command == "vlm" ) then

  if ( item == nil ) then
   json["error"] = true
   json["result"] = "Missing ITEM (for VLM command)"
 
  else

   item=string.gsub( item, "+", " ") 
   response=api_vlm( item )
 
   if( type(response.children) == "table" ) then
       json["result"] = getProperties( response.children )
   else
       json["result"] = response.value
   end

  end 


-- --------------------------------------------------------------------------
elseif ( command == "machine" ) then

  if  ( item == "reboot"  ) then
   json["result"] = api_execute( '/sbin/reboot' )

  elseif ( item == "ifconfig" ) then
   json["result"] = api_execute( '/sbin/ifconfig' )

  elseif ( item == "host" ) then
   json["result"] = api_execute( "/bin/uname -ro" )

  elseif ( item == "version"  ) then
   json["result"] = api_execute( "git describe --tags --long" )

  elseif ( item == "ip" ) then
   json["result"] = api_execute( "/sbin/ifconfig" )

  elseif ( item == "recording" ) then
   json["result"] = api_execute( 'lsof ./video/*mp4*' )
  
  elseif ( item == "space" ) then
   json["result"] = api_execute( 'df -h' )

  elseif ( item == "sensors" ) then
   json["result"] = api_execute( 'sensors' )

  else
    json["result"] = "Unknown ITEM : "..item

 end


-- --------------------------------------------------------------------------
elseif ( command == "recordings" ) then


   if (action== "get") then
     json["result"] = api_execute( 'ls -a video/*mp4* -lhr | awk \'{print $9"|"$6" "$7" "$8"|"$5}\' ')


   elseif (action == "delete" ) then

     file = _GET["file"]
     json["file"]=file

     if ( file == nil ) then
        json["error"] = true
        json["result"] = "Missing FILE"
     else
        cmd="rm --verbose "..file
        json["result"] = api_execute( cmd )
     end

   else
     json["error"]=true
     json["result"]="Invalid ITEM"

   end



-- --------------------------------------------------------------------------
elseif ( command == "video" ) then

     local device = _GET["device"]
     json["device"] = device

	 if (device == nil ) then
       json["error"] = true
	   json["result"] = "Missing DEVICE"

	 elseif (action == "set") then

       local value=_GET["value"]
       json["value"]=value

       setting="/usr/bin/v4l2-ctl --verbose -d "..device.." -c "..item.."="..value 
       json["result"]=api_execute( setting )


	 elseif (action == "get") then

	   if ( item == "devices" ) then
		 json["result"] = api_execute( 'v4l2-ctl --list-devices')

	   elseif ( item == "formats" ) then
		 json["result"] = api_execute( 'v4l2-ctl -d '..device..' --list-formats-ext')

	   elseif ( item == "controls" ) then
		  json["result"] = api_execute( 'v4l2-ctl -d '..device..' -L' )

	   end

    elseif (action == "store" ) then

    else
       json["result"] = "Bad command parameters"

    end



-- --------------------------------------------------------------------------
elseif ( command == "audio" ) then

   device = _GET["device"]

   json["action"] = action
   json["item"] = string.gsub(item, "+"," " )
   json["device"] = string.gsub(device, "+"," ")

	 if (device == nil ) then
	   json["result"] = "Missing DEVICE"


	 elseif ( action == "get" ) then

	  if ( item == "devices" ) then
	   json["result"] = api_execute( "/usr/bin/arecord -l | grep \"^card\" ")

	  elseif ( item == "controls" ) then
	   json["result"] = api_execute( "/usr/bin/amixer --device "..device.." scontents")

	  end

	 elseif ( action == "set" ) then
       local value=string.gsub( _GET["value"], "+", " ")
       json["value"]=value
	   json["result"] = api_execute( "/usr/bin/amixer --device "..json["device"].." sset \""..json["item"].."\" \""..json["value"].."\"")

	 elseif ( action == "store" ) then
       json["result"] = api_execute("/usr/bin/alsactl --file config/audio" )

     else

 	  json["result"] = "Bad command parameters"

	 end



-- --------------------------------------------------------------------------
elseif ( command == "update" ) then


 if ( item == "config" ) then
   local configFile=_GET["file"]
   local configContents=_GET["contents"]

   json["result"] = api_writefile( configFile, configContents )
 
 elseif ( item == "software" ) then
   json["result"] = api_execute( 'git pull' )

 elseif ( item == "schedule-clear" ) then
   api_vlm( "del schedule" )
   api_writefile( "schedule","#cleared" )
   api_writefile( "init-schedule" ,"#cleared")
   json["result"] = "Schedule cleared."

 elseif ( item == "schedule" ) then
   api_vlm( "del schedule" )
   json["result"] = api_execute( './fetch schedule && ./parse schedule' )
   api_vlm( "load config/init-schedule" )

 elseif ( item == nil ) then
    json["result"] = "Missing ITEM"
 else
    json["result"] = "Unknown ITEM : "..item
 end
 


-- --------------------------------------------------------------------------
elseif ( command ==  nil ) then
 json["result"] = "No COMMAND to process"

else
 json["result"] = "Unknown COMMAND "..command

end

-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------


-- All done.  Send back the results

httprequests.printTableAsJson(json)


?>
