#!/bin/bash

# Common
source "${0%/*}/config/common"
source "${0%/*}/config/machine"

item=${1,,}

# Validations..
if [ "$item" == "" ]
then
 log "No item provided."
 exit 1
fi

case "$item" in

    "meta-epoch" )

           epoch=$2
           if [ ! "$epoch" == "" ]
           then

                    sourceData=$(grep -h "|" config/meta) 

                    while IFS="|" read -r scheduleid start stop title description owner
                    do
                         #take out any end-of-line characters from the last variable
                         $owner=$(echo "$owner" | tr '\r' '' )

                         checkStart=$(( $start - 20 ))
                         checkStop=$(( $stop + 20 ))

                         if [[ "$checkStart" -le "$epoch" && "$epoch" -le "$checkStop" ]] 
                         then
                               echo "$title|$description|$owner"
                         fi

                    done <<< "$sourceData"
           fi
           ;;
           
	

    "meta-id" )
           metaMatch=$2
           if [ ! "$metaMatch" == "" ]
           then
              grep "$metaMatch" config/meta 
           fi
           ;;



    "meta-refresh" )

           for file in video/*uploaded
           do

              basename=$(basename "$file")

  	          IFS='.' read -a names <<< "$basename"
              epoch=${names[0]}

              log "-----------------------------"
              log "$epoch"

              info=$(./parse meta-epoch "$epoch")
              if [ "$info" == "" ]
              then
                echo "No metadata for $epoch"
              else

		       # Parse out the metadata into a curl-friendly string
		       IFS='|' read -a meta <<< "$info"

               metaTitle=${meta[0]}
               metaDescription=${meta[1]}
               metaUser=${meta[2]}
               metaUploaded=$(date -d@"$epoch")

		       curlParameters="-F \"title=${metaTitle:Recording}\" -F \"description=${metaDescription:recording}\""

		       # Post to the media server
		       set -x

               info=$( /usr/bin/curl -s -F "title=${metaTitle:Recording}" -F "description=${metaDescription:recording}" -F "update=Y" -F "public=1" -F "mediaKeywords=$roomID $epoch" "$urlUpload" )
               log "$info"

               if [[ "$info" = "error:no media name" ]] 
               then
                 info=$(/usr/bin/curl -F "batchMode=Y" -F "public=1" -F "uploadedUser=$metaUser"  -F "uploaded=$metaUploaded" -F "title=$metaTitle" -F "description=$metaDescription" -F "keywords=$roomID $basename lecture" -F "file=@$file" "$urlUpload")
                 log "$info"
               fi

               set +x
               
              fi
              log "-----------------------------"

           done

           ;;           



    "schedule" )
					scheduleCounter=1

					inputLocal="config/schedule-local"
                    touch $inputLocal

					inputRemote="config/schedule-remote"
                    touch $inputRemote

					outputSchedule="config/init-schedule"
					backup "$outputSchedule"

                    outputMeta="config/meta"
					backup "$outputMeta"

                    sourceData=$(grep -h "|" "$inputLocal" "$inputRemote") 

                    echo "del schedule" > $outputSchedule
                    echo "" > $outputMeta

                    while IFS="|" read -r courseid start stop title description owner
					do

                      sid="s$scheduleCounter-$courseid"

					  startEpoch=$(date +"%s" -d "$start")
					  stopEpoch=$(date +"%s" -d "$stop")

					  startTimestamp=$(date +"%Y/%m/%d-%H:%M:%S" -d @$startEpoch)

                      # Trim off 5 seconds
                      let stopEpoch=stopEpoch-5
					  stopTimestamp=$(date +"%Y/%m/%d-%H:%M:%S" -d @$stopEpoch)

					  meta="$sid|$startEpoch|$stopEpoch|$title|$description / $start to $stop|$owner"

						{
							echo ""
							echo "new   $sid-start schedule"
							echo "setup $sid-start date $startTimestamp"
							echo "setup $sid-start append control recorder stop"
							echo "setup $sid-start append control recorder play"
							echo "setup $sid-start enabled"
							echo ""
							echo "new   $sid-stop schedule"
							echo "setup $sid-stop date $stopTimestamp"
							echo "setup $sid-stop append control recorder stop"
							echo "setup $sid-stop enabled"

						} >> "$outputSchedule"

                        {
                            echo "$meta"
                        } >> "$outputMeta"

      		         let scheduleCounter=scheduleCounter+1
       			done  <<< "$sourceData"

               log "Parsed $scheduleCounter items into $outputSchedule"
               ;;


           *) echo "Invalid action verb."
             ;;    

esac

exit 0

