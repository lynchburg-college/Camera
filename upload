#!/bin/bash

# Common
source "${0%/*}/config/common"

# Apply camera and audio settings 
include "config/init-video"
include "config/init-audio"


if [ -z "$urlUpload" ]
then
  exit 1
fi

touch $logFile
{

   # If an upload is already in progress, skip this pass.
   pidCurl=$(ps -A | grep curl)
   if [ ! "$pidCurl" == "" ]
   then
	 log "Upload already in progress."
     exit 1
   fi

   #  Find all the files that should be uploaded
  for file in $(ls $pathVideo/*.mp4)
   do

      if [ ! -z "$file" ] && [ -s $file ]  
      then

        isBusy=$(lsof $file)
        if [ ! -z "$isBusy" ]
        then
          log "Ignoring (file is open) $file"

        else
           log "Found $file"

           # If the filename is a date, use it as the start time
           baseName=$(basename "$file")
           baseName="${baseName%.*}"

           date -d @$baseName > /dev/null 2>&1

           if [ ! $? -eq 1 ]
           then
             asOf=$baseName
             log "Using filename ($baseName) as creation date"
           else
             asOf=$(stat -c "%s" $file)
             log "Using file modified date ($asOf)"
           fi

           #Use the local init-schedule file to look up metadata
           log "Metadata date is : $asOf"
           info=$(./parse meta "$asOf")

           # Make a call back to the mothership to get the metadata
           #cmd="curl -G -d \"roomID=$roomID&meta=$baseName\" $urlInfo"
           #log "$cmd"
           #info=$(eval "$cmd")

           # Couldn't find anything?  That's OK.. use the default stuff
           if [ "$info" == "" ]
           then
               log "Couldn't find metadata : $roomID / $asOf"
               info="-F \"userID=capture_$roomID\" -F \"public=1\" -F \"title=$roomID Recording\""
           else
               log "Matched : $info"
               echo "$info" > $file.meta
           fi
           
                    
           # Post to the media server
           cmd="/usr/bin/curl -F \"batchMode=Y\" $info -F \"file=@$file\" -F \"keywords=$roomID $baseName\" $urlUpload"
           log "$cmd"

           if [ "$1" == "debug" ] 
           then
             exit 0
           fi

           info=$(eval "$cmd")
           log $info

           # Archive the original file
           if [[ "$info" == *Success* ]]
           then
                log "$file was sucessfully uploaded"
                mv "$file" "$file.uploaded"
           else
                $pathRoot/notify "Upload Error" "$file\n$info"
           fi

        fi

      fi

done

# Remove uploaded stuff older than 1 week
find "$pathVideo/*.uploaded" -mtime +5 -exec rm {} \;

# Alert if space is low
spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
[[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"


} | tee -a $logFile

