#!/bin/bash

# Common
source "${0%/*}/config/common"
source "${0%/*}/config/machine"

# Apply camera and audio settings 
include "config/init-video"
include "config/init-audio"

if [ -z "$urlUpload" ]
then
  exit 1
fi

# Update the timestamp on the log file
touch $logFile

# If an upload is already in progress, skip this pass.
pidCurl=$(ps -A | grep "curl")
if [ ! "$pidCurl" == "" ]
then
 log "Upload already in progress."
 exit 1
fi


#  Find all the files that should can be considered for upload
{
for file in $(ls $pathVideo/*.mp4)
   do

      if [ ! -z "$file" ] && [ -s $file ]  
      then
        isBusy=$(lsof $file)
        if [ ! -z "$isBusy" ]

        then
          log "Ignoring (file is open) $file"

        else
           log "Found $file"

           # If the filename is a date, use it as the start time
           baseName=$(basename "$file")
           baseName="${baseName%.*}"

           date -d @$baseName > /dev/null 2>&1

           if [ ! $? -eq 1 ]
           then
             asOf=$baseName
             log "Using filename ($baseName) as creation date"
           else
             asOf=$(stat -c "%s" $file)
             log "Using file modified date ($asOf)"
           fi

           # Find the metadata for this guy..
           log "Metadata date is : $asOf"
           info=$(./parse meta-epoch "$asOf")

           # Couldn't find anything?  That's OK.. use the default stuff
           if [ "$info" == "" ]
           then
               log "Couldn't find metadata : $roomID / $asOf"
               info="RECORDING|$asOf|$asOf|$roomID Recording|Recording made in $roomID / $roomName on $asOf|hudson-b"
           else
               log "Matched : $info"
               echo "$info" > $file.meta
           fi

 
           # Parse out the metadata into a curl-friendly string
           IFS='|' read -a meta <<< "$info"
           curlParameters=" -F \"title=${meta[3]}\" -F \"description=${meta[4]}\" -F \"userID=${meta[5]}\" "

           # Post to the media server
           cmd="/usr/bin/curl $curlParameters -F \"updateMode=Y\" -F \"mediaKeywords=$roomID $baseName lecture\" -F \"public=1\" -F \"file=@$file\" $urlUpload"
           log "$cmd"

           info=$(eval "$cmd")
           log $info

           # Archive the original file
           if [[ "$info" == *Success* ]]
           then
                log "$file was sucessfully uploaded"
                mv "$file" "$file.uploaded"
           else
                $pathRoot/notify "Upload Error" "$file\n$info"
           fi

        fi

      fi

done

} | tee -a $logFile


# Remove uploaded stuff older than 1 week
find "$pathVideo/*.uploaded" -mtime +5 -exec rm {} \;

# Alert if space is low
spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
[[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"



