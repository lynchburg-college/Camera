#!/bin/bash

# Common
source "${0%/*}/config/common"


# Apply camera settings 
if [ -e "config/camera" ] 
then
 source "config/camera"
fi


touch $logFile
{


   # If an upload is already in progress, skip this pass.
   pidCurl=$(ps -A | grep curl)
   if [ ! "$pidCurl" == "" ]
   then
	 log "Upload already in progress."
     exit 1
   fi


   #  Find all the files that should be uploaded
   for file in $(ls $pathVideo/*.mp4)
   do

      if [ ! -z "$file" ] && [ -s $file ]  
      then

        isBusy=$(lsof $file)
        if [ ! -z "$isBusy" ]
        then
          log "Ignoring (file is open) $file"

        else
           log "Found $file"

           # If the filename is a date, use it as the start time
           baseName=$(basename "$file")
           baseName="${baseName%.*}"
           date -d "$baseName" > /dev/null 2>&1
           if [ ! $? -eq 1 ]
           then
             asOf=$(date -d "$baseName")
             log "Using filename ($baseName) as creation date"
           else
             asOf=$(stat -c "%y" $file)
             log "Using file modified date ($asOf)"
           fi

           # #Use the local schedule file to look up metadata
           # asOf=$(TZ=UTC date +%s -d "$asOf")
           # log "Metadata date is : $asOf"
           # info=$(awk '$1=="#" && $2=="META" { if( d+20 >= ($3) &&  d-10 <= ($4) ) { print $0 } }' d="$asOf"  config/schedule | cut -d' ' -f 5-)

           # Make a call back to the mothership to get the metadata
           cmd="curl $urlInfo -F \"roomID=$roomID\" -F \"meta=$baseName\" "
           log "$cmd"
           info=$(eval "$cmd")

           # Couldn't find anything?  That's OK.. use the default stuff
           if [ "$info" == "" ]
           then
               log "Couldn't find metadata : $roomID / $asOf"
               info="-F \"userID=capture_$roomID\" -F \"public=1\" -F \"title=$roomID Recording\" -F \"keywords=$roomID $baseName\""
           else
               log "Matched : $info"
           fi
           
                    
           # Post to the media server
           cmd="curl -F \"batchMode=Y\" $info -F \"file=@$file\" $urlUpload"
           log "$cmd"

           if [ "$1" == "debug" ] 
           then
             exit 0
           fi

           info=$(eval "$cmd")
           log $info

           # Archive the original file
           if [[ "$info" == *Success* ]]
           then
                log "$file was sucessfully uploaded"
                mv "$file" "$file.uploaded"
           else
                $pathRoot/notify "Upload Error" "$file\n$info"
           fi

        fi

      fi

done

# Remove uploaded stuff older than 1 week
find "$pathVideo/*.uploaded" -mtime +5 -exec rm {} \;

# Alert if space is low
spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
[[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"


} | tee -a $logFile

