#!/bin/bash

# Common
source "${0%/*}/config/common"

touch $logFile
{
   #  Find all the files
   for file in $(ls $pathVideo/*.mp4)
   do

      if [ ! -z "$file" ] && [ -s $file ]  
      then

        isBusy=$(lsof $file)
        if [ ! -z "$isBusy" ]
        then
          log "Ignoring $file"

        else
           log "Found $file"


           # If the filename is a date, use it as the start time
           baseName=$(basename "$file")
           baseName="${baseName%.*}"
           date -d "$baseName" > /dev/null 2>&1
           if [ ! $? -eq 1 ]
           then
             log "Using filename as creation date"
             asOf=$(date -d "$baseName")
           else
             log "Using file modified date"
             asOf=$(stat -c "%y" $file)
           fi

           asOf=$(TZ=UTC date +%Y%m%d%H%M%S -d "$asOf")
           log "Metadata date is : $asOf"

           # Peek through the schedule to find the META with this date between the range of the schedule item
           info=$(awk '$1=="#" && $2=="META" { if( d >= ($3-5) &&  d <= ($4+5) ) { print $0 } }' d="$asOf"  config/schedule | cut -d' ' -f 5-)

           # Couldn't find anything?  That's OK.. use the default stuff
           if [ "$info" == "" ]
           then
               info="-F \"userID=HUDSON_B\" -F \"public=1\" -F \"title=$roomID Recording\" "
           fi
           
           
           # Post to the media server
           cmd="curl -F \"batchMode=Y\" $info -F \"file=@$file\" $urlUpload"
           log "$cmd"
           info=$(eval "$cmd")

           # Archive the original file
           if [[ "$info" == *Success* ]]
           then
                log "$file was sucessfully uploaded"
                mv "$file" "$file.uploaded"
           else
                log "$info"
                $pathRoot/notify "Upload Error" "$file\n$info"
                mv "$file" "$file.error"
           fi

        fi

      fi

done

# Remove uploaded stuff older than 1 week
find "$pathVideo/*.uploaded" -mtime +5 -exec rm {} \;

# Alert if space is low
spaceUsed=$(df $pathVideo | tail -1 | awk '{print $5}' | sed 's/%//g')
[[ $spaceUsed -gt 70 ]] && $pathRoot/notify  "Storage Space Used : $spaceUsed%"


} | tee -a $logFile

