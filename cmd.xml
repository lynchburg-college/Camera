<?vlc

--
-- Command handler for all web actions
--


require "httprequests"

--
-- Utility Functions
--
function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end
-- ----------------------
function string.ends(String,End)
   return End=='' or string.sub(String,-string.len(End))==End
end
-- ----------------------
function pairsByKeys (t, f)
      local a = {}
      for n in pairs(t) do table.insert(a, n) end
      table.sort(a, f)
      local i = 0      -- iterator variable
      local iter = function ()   -- iterator function
        i = i + 1
        if a[i] == nil then return nil
        else return a[i], t[a[i]]
        end
      end
      return iter
 end
-- ----------------------
function getProperties ( collection )
   local o={}
   for k,v in pairsByKeys(collection) do
    if(type(v.children) == "table" ) then
     o[v.name]=getProperties( v.children )
    else
     o[v.name]=v.value
    end
   end
   return o
end
-- ----------------------



--
-- OS Functions
-- ----------------------
function os.capture(cmd, raw)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  return s
end
-- ----------------------
function updateMachine()

   now = os.date("%a %b %d, %Y @ %I:%M:%S%p  ")

   local file = io.open("config/machine", "w")

   file:write('# Configuration written from web : '..now..'\n')
   file:write('\n')

   file:write('roomID='.._GET["roomID"]..'\n')
   file:write('roomName="'.._GET["roomName"]..'"\n')
   file:write('splitMinutes='.._GET["splitMinutes"]..'\n')
   file:write('include="'.._GET["include"]..'"\n')
   file:write('exclude="'.._GET["exclude"]..'"\n')
   
   file:flush()
   file:close()

end
-- ----------------------






command=_GET["command"]
if(command == nil) then
  command="show"
end

result = ""

-- ----------------------
-- Camera 
-- ----------------------
if( string.starts ( command, "camera" ) ) then

   setting="/usr/bin/v4l2-ctl --verbose -c "..(string.sub( command, 8, string.len(command) ) )
   result=os.capture(setting)
  
end


-- ----------------------
-- Machine 
-- ----------------------
if( string.starts ( command, "control" ) ) then

 if     ( string.ends ( command, "reboot") ) then
   result = os.capture( '/sbin/reboot' )
 
 elseif ( string.ends ( command, "ifconfig") ) then
   result = os.capture( '/sbin/ifconfig' )

 end

end



-- ----------------------
-- View
-- ----------------------
if( string.starts ( command, "show" ) ) then

 if     ( string.ends ( command, "videos") ) then
   result = vlc.net.opendir( 'video' )

 elseif ( string.ends ( command, "recording") ) then
   result = os.capture( 'lsof ./video/*' )

 elseif ( string.ends ( command, "camera") ) then
   result = os.capture( 'v4l2-ctl -l' )
   
 elseif ( string.ends ( command, "space") ) then
   result = os.capture( 'df -h' )

 elseif ( string.ends( command, "ip") ) then
   result = os.capture( "/sbin/ifconfig" )

 end

end
   

-- ----------------------
-- Update
-- ----------------------

if( string.starts ( command, "update" ) ) then


 if ( string.ends(  command, "machine") ) then

   updateMachine()
   result="Machine Config Written.  Remember to reload the schedule."
   
 elseif     ( string.ends ( command, "software") ) then
   result = os.capture( 'git pull' )

 elseif ( string.ends ( command, "schedule") ) then

   result = "Schedule Updated"
   os.capture( './schedule' )
   vlc.vlm():execute_command( "load config/schedule" )

 end
 
end





if (result == "" ) then

   response = vlc.vlm():execute_command( command )
   if( type(response.children) == "table" ) then
      result = getProperties( response.children )
   else
      result = response.value
   end

end

json = {}
json["command"] = command
json["timestamp"]=os.date("%Y-%m-%d %H:%M:%S (%a)")
json["result"]=result

httprequests.printTableAsJson(json)

?>
